{"version":3,"sources":["FetchData.test.js"],"names":["mock","axios","fetchData","API","describe","it","data","hits","objectID","title","get","mockImplementationOnce","Promise","resolve","expect","resolves","toEqual","toHaveBeenCalledWith","errorMessage","reject","Error","rejects","toThrow"],"mappings":"AAIA,cAAKA,IAAL,CAAU,OAAV;;;;;;;;;;;;AAJA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,aAA/B;AAIAC,QAAQ,CAAC,WAAD,EAAc,MAAM;AACxBC,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACpD,UAAMC,IAAI,GAAG;AACTA,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAE,CACF;AACIC,UAAAA,QAAQ,EAAE,GADd;AAEIC,UAAAA,KAAK,EAAE;AAFX,SADE,EAKF;AACID,UAAAA,QAAQ,EAAE,GADd;AAEIC,UAAAA,KAAK,EAAE;AAFX,SALE;AADJ;AADG,KAAb;AAeAR,IAAAA,KAAK,CAACS,GAAN,CAAUC,sBAAV,CAAiC,MAAMC,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CAAvC;AAEA,UAAMQ,MAAM,CAACZ,SAAS,CAAC,OAAD,CAAV,CAAN,CAA2Ba,QAA3B,CAAoCC,OAApC,CAA4CV,IAA5C,CAAN;AAEAQ,IAAAA,MAAM,CAACb,KAAK,CAACS,GAAP,CAAN,CAAkBO,oBAAlB,CACK,GAAEd,GAAI,qBADX;AAGH,GAvBC,CAAF;AAyBAE,EAAAA,EAAE,CAAC,sCAAD,EAAyC,YAAY;AACnD,UAAMa,YAAY,GAAG,eAArB;AAEAjB,IAAAA,KAAK,CAACS,GAAN,CAAUC,sBAAV,CAAiC,MAC7BC,OAAO,CAACO,MAAR,CAAe,IAAIC,KAAJ,CAAUF,YAAV,CAAf,CADJ;AAIA,UAAMJ,MAAM,CAACZ,SAAS,CAAC,OAAD,CAAV,CAAN,CAA2BmB,OAA3B,CAAmCC,OAAnC,CAA2CJ,YAA3C,CAAN;AACH,GARC,CAAF;AASH,CAnCO,CAAR","sourcesContent":["import axios from 'axios';\r\n\r\nimport { fetchData, API } from './FetchData';\r\n\r\njest.mock('axios');\r\n\r\ndescribe('fetchData', () => {\r\n    it('fetches successfully data from an API', async () => {\r\n        const data = {\r\n            data: {\r\n                hits: [\r\n                    {\r\n                        objectID: '1',\r\n                        title: 'a',\r\n                    },\r\n                    {\r\n                        objectID: '2',\r\n                        title: 'b',\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        axios.get.mockImplementationOnce(() => Promise.resolve(data));\r\n\r\n        await expect(fetchData('react')).resolves.toEqual(data);\r\n\r\n        expect(axios.get).toHaveBeenCalledWith(\r\n            `${API}/search?query=react`,\r\n        );\r\n    });\r\n\r\n    it('fetches erroneously data from an API', async () => {\r\n        const errorMessage = 'Network Error';\r\n\r\n        axios.get.mockImplementationOnce(() =>\r\n            Promise.reject(new Error(errorMessage)),\r\n        );\r\n\r\n        await expect(fetchData('react')).rejects.toThrow(errorMessage);\r\n    });\r\n});\r\n"]}